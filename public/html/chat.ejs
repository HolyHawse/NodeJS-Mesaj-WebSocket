<div class="container-fluid py-3" style="height: 85vh; min-height: 400px;">
  <div class="row h-100">
    <!-- Sol: Arkadaş Listesi -->
    <div class="col-12 col-md-4 col-lg-3 border-end d-flex flex-column p-0 bg-white" style="height:100%;">
      <div class="p-3 border-bottom bg-light">
        <h5 class="mb-0">Arkadaşlar</h5>
      </div>
      <div class="flex-grow-1 overflow-auto" id="friendList" style="min-height:0;">
        <% if (friends && friends.length > 0) { %>
          <ul class="list-group list-group-flush">
            <% friends.forEach(function(friend) { %>
              <li class="list-group-item list-group-item-action d-flex align-items-center friend-item" data-id="<%= friend.id %>" style="cursor:pointer;">
                <i class="bi bi-person-circle fs-4 me-2"></i>
                <span><%= friend.name %> <%= friend.surname %></span>
              </li>
            <% }); %>
          </ul>
        <% } else { %>
          <div class="text-muted p-3">Hiç arkadaşınız yok.</div>
        <% } %>
      </div>
    </div>
    <!-- Sağ: Sohbet Alanı -->
    <div class="col-12 col-md-8 col-lg-9 d-flex flex-column p-0" style="height:100%;">
      <div class="p-3 border-bottom bg-light d-flex align-items-center" id="chatHeader" style="min-height:56px;">
        <span class="fw-bold" id="chatFriendName">Bir arkadaş seçin</span>
      </div>
      <div class="flex-grow-1 overflow-auto px-3 py-2" id="chatMessages" style="background:#f8f9fa; min-height:0;">
        <div class="text-muted text-center mt-5">Sohbet başlatmak için bir arkadaş seçin.</div>
      </div>
      <form id="chatForm" class="d-flex border-top p-2 bg-white" style="display:none;">
        <input type="text" class="form-control me-2" id="chatInput" placeholder="Mesajınızı yazın..." autocomplete="off">
        <button class="btn btn-primary" type="submit"><i class="bi bi-send"></i></button>
      </form>
    </div>
  </div>
</div>

<script>
const userId = <%= user.id %>;
let currentFriendId = null;
let ws;

function connectWS() {
  ws = new WebSocket((location.protocol === 'https:' ? 'wss://' : 'ws://') + location.host);

  ws.onopen = function() {
    ws.send(JSON.stringify({ type: 'auth', userId }));
  };

  ws.onmessage = function(event) {
    const msg = JSON.parse(event.data);
    if (msg.type === 'auth' && msg.status === 'ok') {
      // Bağlantı başarılı
    }
    if (msg.type === 'chatMessage') {
      const data = msg.data;
      if (currentFriendId && (data.from_user_id === currentFriendId || data.from_user_id === userId && data.to_user_id === currentFriendId)) {
        fetch(`/chat/messages/${currentFriendId}`)
          .then(res => res.json())
          .then(data => renderMessages(data));
      }
    }
  };

  ws.onclose = function() {
    setTimeout(connectWS, 2000); // Otomatik tekrar bağlan
  };
}
connectWS();

function scrollToBottom() {
  const chatMessages = document.getElementById('chatMessages');
  chatMessages.scrollTop = chatMessages.scrollHeight;
}

function renderMessages(messages) {
  const chatMessages = document.getElementById('chatMessages');
  chatMessages.innerHTML = '';
  if (!messages.length) {
    chatMessages.innerHTML = '<div class="text-muted text-center mt-5">Henüz mesaj yok.</div>';
    return;
  }
  messages.forEach(msg => {
    const isMe = msg.from_user_id === userId;
    const msgDiv = document.createElement('div');
    msgDiv.className = 'd-flex mb-2 ' + (isMe ? 'justify-content-end' : 'justify-content-start');
    msgDiv.innerHTML = `
      <div class="p-2 rounded-3 ${isMe ? 'bg-primary text-white' : 'bg-light'}" style="max-width:70%; word-break:break-word;">
        <div style="font-size:1em;">${msg.message.replace(/</g, "&lt;").replace(/>/g, "&gt;")}</div>
        <div class="text-end" style="font-size:0.75em;opacity:0.7;">${new Date(msg.created_at).toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'})}</div>
      </div>
    `;
    chatMessages.appendChild(msgDiv);
  });
  scrollToBottom();
}

document.querySelectorAll('.friend-item').forEach(item => {
  item.addEventListener('click', function() {
    document.querySelectorAll('.friend-item').forEach(i => i.classList.remove('active'));
    this.classList.add('active');
    currentFriendId = Number(this.getAttribute('data-id'));
    document.getElementById('chatFriendName').textContent = this.textContent.trim();
    document.getElementById('chatForm').style.display = '';
    fetch(`/chat/messages/${currentFriendId}`)
      .then(res => res.json())
      .then(data => renderMessages(data));
  });
});

document.getElementById('chatForm').addEventListener('submit', function(e) {
  e.preventDefault();
  const input = document.getElementById('chatInput');
  const message = input.value.trim();
  if (!message || !currentFriendId) return;
  ws.send(JSON.stringify({ type: 'chatMessage', from: userId, to: currentFriendId, message }));
  input.value = '';
});
</script>
<style>
@media (max-width: 768px) {
  .container-fluid > .row > .col-md-4,
  .container-fluid > .row > .col-md-8 {
    min-width: 100vw !important;
    max-width: 100vw !important;
    flex: 0 0 100vw !important;
    padding: 0 !important;
  }
  .container-fluid {
    padding: 0 !important;
  }
}
.friend-item.active, .friend-item:hover {
  background: #e3f2fd;
}
body.dark-mode #chatMessages {
  background: #23272b !important;
}
body.dark-mode .bg-light {
  background: #23272b !important;
  color: #e2e2e2 !important;
}
body.dark-mode .bg-white {
  background: #181a1b !important;
  color: #e2e2e2 !important;
}
body.dark-mode .friend-item.active, body.dark-mode .friend-item:hover {
  background: #375a7f !important;
  color: #fff !important;
}
</style>